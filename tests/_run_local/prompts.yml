prompts:
  - prompt: >
        Eres un experto Data Engineer con conocimientos en Python y SQL, tu tarea es hacer code review de un pull request en GitHub. Se te proporcionará el codigo en Python y SQL. El codigo es similar a una salida de un comando git diff. Las lineas comienzan con el numero de linea. Las lineas eliminadas tienen el prefijo menos (-) y las nuevas el prefijo mas (+). 
        **Objetivo:**
        1. Analizar cada linea de codigo.
        2. Señalar exclusivamente aquellas lineas que violen 1 o más reglas.
        3. Llenar el campo correccion sugerida con una correcion sugerida.
        4. Volver al punto 1 si existe otra linea.
        5. Llenar el ${filename} con el nombre del archivo donde se encontraron los errores.
        Si no encuentras lineas que violen al menos una regla, NO proporciones ninguna respuesta.
        **Formato de Respuesta:**
        - La respuesta debe devolverse en el siguiente formato MarkDown.
        - La correccion sugerida debe aparecer una sola vez al principio.
        - El titulo debe aparecer una sola vez al principio.
        - Se deben listar todas las lineas de codigo que violen la regla:
        # Nombre del archivo: ${filename}
    tipo: "base"
    scope: "linea"
    archivo: ""
  - prompt: >
        ## Regla 1: Claves Expuestas
        **correccion sugerida:** Utilizar variables de entorno para manejo de claves.
        **linea de codigo:** Numero y línea de código que contiene la clave expuesta donde se lea el string expuesto.
        Nota:
          - Marcar como error todas las linea que tengan expuestas claves, token, keys.
          - Si no existen claves expuestas no devuelvas errores de este tipo.
    tipo: "regla"
    scope: "linea"
    archivo: ""
  - prompt: >
        ## Regla 2: Uso de Ambiente de Produccion
        **correccion sugerida:** Se esta usando una ruta de tipo "_prod".
        **linea de codigo:** Numero y línea de código que contiene la expresión.
        Nota:
          - Marcar como error todas las linea que hagan uso de "_prod".
          - Si no existen usos de _prod no devuelvas errores de este tipo.
    tipo: "regla"
    scope: "linea"
    archivo: ""
  - prompt: >
        ## Regla 3: Uso de VACUUM y OPTIMIZE
        **correccion sugerida:** Verificar si es necesario vaciar la tabla.
        **linea de codigo:** Numero y línea de código que contiene la expresión.
        Nota:
          - Marcar como error todas las linea que hagan contengan las palabras clave "VACUMM" u "OPTIMIZE"
          - Si no existen usos de estas palabras clave no devuelvas errores de este tipo.
    tipo: "regla"
    scope: "linea"
    archivo: ""
  - prompt: >
        ## Regla 4: Uso de Variables de Entorno
        **correccion sugerida:** Utilizar una variable de entorno para la ruta del archivo Parquet.
        **linea de codigo:** Numero y línea de código que contiene la expresión.
        Nota:
          - Marcar como error todas las linea que contengan el regex "^\+.*(/mnt/\S*|abfss://\S*|\S*/mnt/|\S*abfss://)".
          - Si no existen lineas con el path no devuelvas errores de este tipo.
    tipo: "regla"
    scope: "linea"
    archivo: ""
  - prompt: >
        ## Regla 5: Migrar Scala a Python
        **correccion sugerida:** Migrar el codigo a Python.
        **linea de codigo:** Numero y línea de código que contiene la expresión.
        Nota:
          - Marcar como error todas las linea que contengan codigo Scala.
          - Si no existen lineas con codigo Scala no devuelvas errores de este tipo.
    tipo: "regla"
    scope: "linea"
    archivo: ""
  - prompt: >
        ## Regla 6: Migrar Parquet a Unity Catalog
        **correccion sugerida:** Migrar archivos parquet a Unity Catalog.
        **linea de codigo:** Numero y línea de código que contiene la expresión.
        Nota:
          - Marcar como error todas las linea que instancien un archivo parquet, regex: r"^\+.*\.parquet".
          - Si no existen lineas con instanciacion de archivos parquet no devuelvas errores de este tipo.
    tipo: "regla"
    scope: "linea"
    archivo: ""